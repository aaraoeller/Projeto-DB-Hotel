@ALUNOS: Emerson Aarao Eller Batista
@DISCIPLINA: Projeto de banco de dados
@TURMA: 3°
@CURSO: Análise e Desenvolvimento de Sistemas

START TRANSACTION;

CREATE DATABASE HOTEL;

USE HOTEL;

CREATE TABLE CUSTOMER(
    IDCUSTOMER INT PRIMARY KEY AUTO_INCREMENT,
    NAME_CUSTOMER VARCHAR(30) NOT NULL,
    CPF VARCHAR(30) NOT NULL,
    PHONE VARCHAR(30) NOT NULL,
    EMAIL VARCHAR(50)
);

CREATE TABLE ROOM(
    IDROOM INT PRIMARY KEY AUTO_INCREMENT,
    ROOM VARCHAR(30),
    BEDS VARCHAR(30)
);

CREATE TABLE RESERVE(
    IDRESERVE INT PRIMARY KEY AUTO_INCREMENT,
    TIME DATETIME,
    FK_ID_CUSTOMER INT,
    FK_ID_ROOM INT
);

CREATE TABLE SERVICE(
    IDSERVICE INT PRIMARY KEY AUTO_INCREMENT,
    TYPE_SERVICE VARCHAR(50),
    DESCRIPTION VARCHAR(100),
    PRICE FLOAT(10,2)
);

CREATE TABLE RESERVE_SERVICE(
    IDRESERVE_SERVICE INT PRIMARY KEY AUTO_INCREMENT,
    DATE DATETIME,
    FK_ID_RESERVE INT,
    FK_ID_SERVICE INT
);

CREATE TABLE CHECKIN( 
    IDCHECKIN INT PRIMARY KEY AUTO_INCREMENT,
    TIME_CHECKIN DATETIME,
    FK_IN_ID_RESERVE INT
);

CREATE TABLE CHECKOUT(
    IDCHECKOUT INT PRIMARY KEY AUTO_INCREMENT,
    TIME_CHECKOUT DATETIME,
    FK_OUT_ID_RESERVE INT
);


-- FOREIGN KEYS

ALTER TABLE RESERVE ADD FOREIGN KEY(FK_ID_CUSTOMER) REFERENCES CUSTOMER(IDCUSTOMER);
ALTER TABLE RESERVE ADD FOREIGN KEY(FK_ID_ROOM) REFERENCES ROOM(IDROOM);

ALTER TABLE RESERVE_SERVICE ADD FOREIGN KEY(FK_ID_RESERVE) REFERENCES RESERVE(IDRESERVE);
ALTER TABLE RESERVE_SERVICE ADD FOREIGN KEY(FK_ID_SERVICE) REFERENCES SERVICE(IDSERVICE);

ALTER TABLE CHECKIN ADD FOREIGN KEY(FK_IN_ID_RESERVE) REFERENCES RESERVE(IDRESERVE);
ALTER TABLE CHECKOUT ADD FOREIGN KEY(FK_OUT_ID_RESERVE) REFERENCES RESERVE(IDRESERVE);


-- PROCEDURES (INSERT, UPDATE, DELETE)

DELIMITER $

CREATE PROCEDURE SP_INS_CUSTOMER(P_NAME_CUSTOMER VARCHAR(30),
                                 P_CPF VARCHAR(30),
                                 P_PHONE VARCHAR(30),
                                 P_EMAIL VARCHAR(50))

BEGIN

        INSERT INTO CUSTOMER(NAME_CUSTOMER,CPF,PHONE,EMAIL) VALUES(P_NAME_CUSTOMER,P_CPF,P_PHONE,P_EMAIL);

END $

--

CREATE PROCEDURE SP_UPD_CUSTOMER(P_NAME_CUSTOMER VARCHAR(30),
                                 P_CPF VARCHAR(30),
                                 P_PHONE VARCHAR(30),
                                 P_EMAIL VARCHAR(50),
                                 P_IDCUSTOMER INT)

BEGIN

        UPDATE CUSTOMER SET NAME_CUSTOMER = P_NAME_CUSTOMER,
                            CPF = P_CPF,
                            PHONE = P_PHONE,
                            EMAIL = P_EMAIL

        WHERE IDCUSTOMER = P_IDCUSTOMER;

END $

--

CREATE PROCEDURE SP_DEL_CUSTOMER(P_IDCUSTOMER INT)

BEGIN

        DELETE FROM CUSTOMER WHERE IDCUSTOMER = P_IDCUSTOMER;

END $

--

CREATE PROCEDURE SP_INS_ROOM(P_ROOM VARCHAR(30),
                             P_BEDS VARCHAR(30))

BEGIN

        INSERT INTO ROOM(ROOM,BEDS) VALUES(P_ROOM,P_BEDS);

END $

--

CREATE PROCEDURE SP_UPD_ROOM(P_ROOM VARCHAR(30),
                             P_BEDS VARCHAR(30),
                             P_IDROOM INT)

BEGIN

        UPDATE ROOM SET ROOM = P_ROOM,
                        BEDS = P_BEDS

        WHERE IDROOM = P_IDROOM;

END $

--

CREATE PROCEDURE SP_DEL_ROOM(P_IDROOM INT)

BEGIN

        DELETE FROM ROOM WHERE IDROOM = P_IDROOM;

END $

--

CREATE PROCEDURE SP_INS_RESERVE(P_TIME DATETIME)

BEGIN

        INSERT INTO RESERVE(TIME) VALUES(P_TIME);

END $

--

CREATE PROCEDURE SP_UPD_RESERVE(P_TIME DATETIME,
                                P_IDRESERVE INT)

BEGIN

        UPDATE RESERVE SET TIME = P_TIME

        WHERE IDRESERVE = P_IDRESERVE;

END $

--

CREATE PROCEDURE SP_DEL_RESERVE(P_IDRESERVE INT)

BEGIN

        DELETE FROM RESERVE WHERE IDRESERVE = P_IDRESERVE;

END $

--

CREATE PROCEDURE SP_INS_SERVICE(P_TYPE_SERVICE VARCHAR(50),
                                P_DESCRIPTION VARCHAR(100),
                                P_PRICE FLOAT(10,2))

BEGIN

        INSERT INTO SERVICE(TYPE_SERVICE,DESCRIPTION,PRICE) VALUES(P_TYPE_SERVICE,P_DESCRIPTION,P_PRICE);

END $

--

CREATE PROCEDURE SP_UPD_SERVICE(P_TYPE_SERVICE VARCHAR(50),
                                P_DESCRIPTION VARCHAR(100),
                                P_PRICE FLOAT(10,2),
                                P_IDSERVICE INT)

BEGIN

        UPDATE SERVICE SET TYPE_SERVICE = P_TYPE_SERVICE,
                           DESCRIPTION = P_DESCRIPTION,
                           PRICE = P_PRICE

        WHERE IDSERVICE = P_IDSERVICE;

END $

--

CREATE PROCEDURE SP_DEL_SERVICE(P_IDSERVICE INT)

BEGIN

        DELETE FROM SERVICE WHERE IDSERVICE = P_IDSERVICE;

END $

--

CREATE PROCEDURE SP_INS_RESERVE_SERVICE(P_DATE DATETIME)

BEGIN

        INSERT INTO RESERVE_SERVICE(DATE) VALUES(P_DATE);

END $

--

CREATE PROCEDURE SP_UPD_RESERVE_SERVICE(P_DATE DATETIME,
                                        P_IDRESERVE_SERVICE INT)

BEGIN

        UPDATE RESERVE_SERVICE SET DATE = P_DATE

        WHERE IDRESERVE_SERVICE = P_IDRESERVE_SERVICE;

END $

--

CREATE PROCEDURE SP_DEL_RESERVE_SERVICE(P_IDRESERVE_SERVICE INT)

BEGIN

        DELETE FROM RESERVE_SERVICE WHERE IDRESERVE_SERVICE = P_IDRESERVE_SERVICE;

END $

--

CREATE PROCEDURE SP_INS_CHECKIN(P_TIME_CHECKIN DATETIME)

BEGIN

        INSERT INTO CHECKIN(TIME_CHECKIN) VALUES(P_TIME_CHECKIN);

END $

--

CREATE PROCEDURE SP_UPD_CHECKIN(P_TIME_CHECKIN DATETIME,
                                P_IDCHECKIN INT)

BEGIN

        UPDATE CHECKIN SET TIME_CHECKIN = P_TIME_CHECKIN

        WHERE IDCHECKIN = P_IDCHECKIN;

END $

--

CREATE PROCEDURE SP_DEL_CHECKIN(P_IDCHECKIN INT)

BEGIN

        DELETE FROM CHECKIN WHERE IDCHECKIN = P_IDCHECKIN;

END $

--

CREATE PROCEDURE SP_INS_CHECKOUT(P_TIME_CHECKOUT DATETIME)

BEGIN

        INSERT INTO CHECKOUT(TIME_CHECKOUT) VALUES(P_TIME_CHECKOUT);

END $

--

CREATE PROCEDURE SP_UPD_CHECKOUT(P_TIME_CHECKOUT DATETIME,
                                P_IDCHECKOUT INT)

BEGIN

        UPDATE CHECKOUT SET TIME_CHECKOUT = P_TIME_CHECKOUT

        WHERE IDCHECKOUT = P_IDCHECKOUT;

END $

--

CREATE PROCEDURE SP_DEL_CHECKOUT(P_IDCHECKOUT INT)

BEGIN

        DELETE FROM CHECKOUT WHERE IDCHECKOUT = P_IDCHECKOUT;

END $

DELIMITER ;


-- FUNCTION

DELIMITER $

CREATE FUNCTION FN_GET_CUSTOMER_NAME(IDCUSTOMER INT)
RETURNS VARCHAR(30)
DETERMINISTIC

BEGIN
    DECLARE CUSTOMER_NAME VARCHAR(30);
    
    SELECT NAME_CUSTOMER INTO CUSTOMER_NAME
    FROM CUSTOMER C
    INNER JOIN RESERVE R
    WHERE C.IDCUSTOMER = R.IDRESERVE;
    
    RETURN NAME_CUSTOMER;

END$

DELIMITER ;


-- VIEW

CREATE VIEW V_CUSTOMER_INFO
AS
    SELECT C.NAME_CUSTOMER, C.PHONE, C.EMAIL, R.TIME
    FROM CUSTOMER C
    INNER JOIN RESERVE R
    ON IDCUSTOMER = IDRESERVE;


-- USERS AND PRIVILEGES

CREATE USER 'ADMIN'@'LOCALHOST' IDENTIFIED BY 'ADMIN123';
GRANT ALL PRIVILEGES
ON HOTEL.*
TO ADMIN@LOCALHOST
WITH GRANT OPTION;

--

CREATE USER 'JOAO'@'LOCALHOST' IDENTIFIED BY '123';
GRANT SELECT, INSERT, UPDATE, DELETE
ON HOTEL.*
TO JOAO@LOCALHOST;

--

CREATE USER 'MARCOS'@'LOCALHOST' IDENTIFIED BY '1234';
GRANT SELECT
ON HOTEL.*
TO MARCOS@LOCALHOST;

--

REVOKE DELETE
ON HOTEL.*
FROM JOAO@LOCALHOST;

COMMIT;